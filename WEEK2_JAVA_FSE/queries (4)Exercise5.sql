BEGIN
   BEGIN
      EXECUTE IMMEDIATE '
        CREATE TABLE Customers (
          CustomerID NUMBER PRIMARY KEY,
          Name VARCHAR2(100),
          DOB DATE,
          Balance NUMBER,
          LastModified DATE
        )
      ';
      DBMS_OUTPUT.PUT_LINE('Table "Customers" created successfully.');
   EXCEPTION
      WHEN OTHERS THEN
         IF SQLCODE = -955 THEN
            DBMS_OUTPUT.PUT_LINE('Table "Customers" already exists.');
         ELSE
            DBMS_OUTPUT.PUT_LINE('Error creating Customers table: ' || SQLERRM);
         END IF;
   END;
END;
/
BEGIN
   BEGIN
      EXECUTE IMMEDIATE '
        CREATE TABLE Accounts (
          AccountID NUMBER PRIMARY KEY,
          Balance NUMBER
        )
      ';
      DBMS_OUTPUT.PUT_LINE('Table "Accounts" created successfully.');
   EXCEPTION
      WHEN OTHERS THEN
         IF SQLCODE = -955 THEN
            DBMS_OUTPUT.PUT_LINE('Table "Accounts" already exists.');
         ELSE
            DBMS_OUTPUT.PUT_LINE('Error creating Accounts table: ' || SQLERRM);
         END IF;
   END;
END;
/
BEGIN
   BEGIN
      EXECUTE IMMEDIATE '
        CREATE TABLE Transactions (
          TransactionID NUMBER PRIMARY KEY,
          AccountID NUMBER,
          Amount NUMBER,
          TransactionType VARCHAR2(20),
          TransactionDate DATE
        )
      ';
      DBMS_OUTPUT.PUT_LINE('Table "Transactions" created successfully.');
   EXCEPTION
      WHEN OTHERS THEN
         IF SQLCODE = -955 THEN
            DBMS_OUTPUT.PUT_LINE('Table "Transactions" already exists.');
         ELSE
            DBMS_OUTPUT.PUT_LINE('Error creating Transactions table: ' || SQLERRM);
         END IF;
   END;
END;
/
BEGIN
   BEGIN
      EXECUTE IMMEDIATE '
        CREATE TABLE AuditLog (
          AuditID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
          TransactionID NUMBER,
          AccountID NUMBER,
          Amount NUMBER,
          TransactionType VARCHAR2(20),
          LogDate DATE
        )
      ';
      DBMS_OUTPUT.PUT_LINE('Table "AuditLog" created successfully.');
   EXCEPTION
      WHEN OTHERS THEN
         IF SQLCODE = -955 THEN
            DBMS_OUTPUT.PUT_LINE('Table "AuditLog" already exists.');
         ELSE
            DBMS_OUTPUT.PUT_LINE('Error creating AuditLog table: ' || SQLERRM);
         END IF;
   END;
END;
/
CREATE OR REPLACE TRIGGER UpdateCustomerLastModified
BEFORE UPDATE ON Customers
FOR EACH ROW
BEGIN
  :NEW.LastModified := SYSDATE;
END;
/
CREATE OR REPLACE TRIGGER LogTransaction
AFTER INSERT ON Transactions
FOR EACH ROW
BEGIN
  INSERT INTO AuditLog (TransactionID, AccountID, Amount, TransactionType, LogDate)
  VALUES (:NEW.TransactionID, :NEW.AccountID, :NEW.Amount, :NEW.TransactionType, SYSDATE);
END;
/
CREATE OR REPLACE TRIGGER CheckTransactionRules
BEFORE INSERT ON Transactions
FOR EACH ROW
DECLARE
  v_balance NUMBER;
BEGIN
  IF :NEW.TransactionType = 'Withdrawal' THEN
    -- Get current balance of the account
    SELECT Balance INTO v_balance FROM Accounts WHERE AccountID = :NEW.AccountID;
    
    -- Check if withdrawal amount exceeds balance
    IF :NEW.Amount > v_balance THEN
      RAISE_APPLICATION_ERROR(-20001, 'Error: Withdrawal amount exceeds account balance.');
    END IF;
    
  ELSIF :NEW.TransactionType = 'Deposit' THEN
    -- Deposit must be a positive amount
    IF :NEW.Amount <= 0 THEN
      RAISE_APPLICATION_ERROR(-20002, 'Error: Deposit amount must be positive.');
    END IF;
  END IF;
END;
/
